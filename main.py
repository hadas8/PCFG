import re
from pcfg import PRule, PCFG 


def load_grammar(path):
    #reads the grammar file and returns dictionaries of start variable, grammar and lexicon
    start = None
    rules = {}

    #define regexes
    re_title = re.compile(r'# (.+) #')
    regexes = {
        'Start Symbol' : re.compile(r'start_variable (.+)$'),
        'Grammar' : re.compile(r'(?P<variable>.+) -> (?P<derivation>.+) \[(?P<probability>.+)\]$'),
        'Lexicon' : re.compile(r'(?P<variable>.+) -> (?P<terminal_rule>.+)$')
    }

    #create dictionaries
    with open(path) as grammar_file:
        title = None
        for line in grammar_file:
            title_match = re_title.match(line)
            if title_match:
                title = title_match.group(1)
            elif title == 'Start Symbol': #find start variable in file
                start_match = regexes[title].match(line)
                if start_match:
                    start = start_match.group(1)
            elif title == 'Grammar': #find variable rules in file
                rule_match = regexes[title].match(line)
                if rule_match:
                    rule = PRule(
                        variable = rule_match.groupdict()['variable'],
                        derivation = rule_match.groupdict()['derivation'].split(),
                        probability = rule_match.groupdict()['probability']
                    )
                    rules.setdefault(rule.variable, []).append(rule)
            elif title == 'Lexicon': #find terminal rules in file
                rules_match = regexes[title].match(line)
                if rules_match:
                    for terminal_rule in rules_match.groupdict()['terminal_rule'].split(' | '):
                        rule = PRule(
                            variable = rules_match.groupdict()['variable'],
                            derivation = [terminal_rule.split(' ')[0][1:-1]],
                            probability = terminal_rule.split(' ')[1][1:-1]
                        )
                        rules.setdefault(rule.variable, []).append(rule)
    return start, rules


def main():
    #(a)
    start, rules = load_grammar(r'grammar.txt')
    g = PCFG(start, rules) #PCFG instance that represents the grammar in the file

    #(b)
    near_cnf_g, changes = g.to_near_cnf() #PCFG instance in near cnf

    #(c)
    with open(r'data.txt') as sentences:
        for w in sentences:
            if not w.strip():
                continue
            tree = near_cnf_g.cky_parser(w)
            if tree:
                print(w)
                print('parse tree in near-cnf:')
                print(tree)
                print()
                print('parse tree in original grammar:')
                print(g.adjust_near_cnf_ptree(tree, changes))
            else:
                print('The string was not generated by the grammar')
            print()

    #bonus question
    
    
if __name__ == '__main__':
    main()
